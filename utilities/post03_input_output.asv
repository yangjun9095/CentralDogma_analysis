% Script to probe relationship between input protein concentration and
% output transcriptional response
clear 
close all
% define ID variables
K = 3;
w = 7;
project = 'Dl-Ven x snaBAC';
nBoots = 100;
% project = 'Dl_Venus_hbP2P_MCPmCherry_Zoom2_7uW14uW';
dropboxFolder =  'E:\Nick\Dropbox (Garcia Lab)\';
% dropboxFolder = 'C:\Users\nlamm\Dropbox (Garcia Lab)\';
dataPath = [dropboxFolder '\ProcessedEnrichmentData\' project '\'];
figPath = [dropboxFolder '\LocalEnrichmentFigures\' project '\hmm_input_output_K' num2str(K) '_w' num2str(w) '\'];
mkdir(figPath)
load([dataPath 'input_output_snips.mat'])
gene_name = 'snaBAC';
protein_name = 'Dorsal';
%%
%%% Make time-dependent cross-covariance plots
% define some colors
yw = [234 194 100]/256; % yellow
bl = [115 143 193]/256; % blue
rd = [213 108 85]/256; % red
gr = [191 213 151]/256; % green
br = [207 178 147]/256; % brown

feature_cell = {'fluo_rise','fluo_fall','protein_peak','protein_trough'};
flag_names = {'pt_peak_flag','pt_trough_flag','fluo_change_flags','fluo_change_flags'};
val_vec = [1 1 1 -1];


results_struct = struct;
for i = 1:numel(feature_cell)
    f_string = feature_cell{i};
    % initialize arrays
    protein_spot_mat = NaN(nBoots,2*n_lags+1);
    protein_swap_spot_mat = NaN(nBoots,2*n_lags+1);
    protein_serial_mat = NaN(nBoots,2*n_lags+1);
    protein_swap_serial_mat = NaN(nBoots,2*n_lags+1);
    fluo_spot_mat = NaN(nBoots,2*n_lags+1);
    fluo_swap_spot_mat = NaN(nBoots,2*n_lags+1);   
    feature_indices = find([input_output_snips.(flag_names{i})]==val_vec(i));
    for n = 1:2%nBoots    
        % sample indices
        eval(['indices = ' feature_cell{i} '_indices;'])
        boot_indices = randsample(indices,numel(indices),true);
        % extract
        p_vec_spot = nanmean(vertcat(input_output_snips(boot_indices).spot_protein_vec));
        p_vec_spot_swap = nanmean(vertcat(input_output_snips(boot_indices).swap_spot_protein_vec));
        p_vec_serial = nanmean(vertcat(input_output_snips(boot_indices).serial_protein_vec));
        p_vec_serial_swap = nanmean(vertcat(input_output_snips(boot_indices).swap_serial_protein_vec));
        f_vec_spot = nanmean(vertcat(input_output_snips(boot_indices).fluo_vec));
        f_vec_swap = nanmean(vertcat(input_output_snips(boot_indices).swap_fluo_vec));
        % record
        protein_spot_mat(n,:) = p_vec_spot - p_vec_spot_serial;
        protein_swap_spot_mat(n,:) = p_vec_spot_swap - p_vec_spot_serial_swap;        
        fluo_spot_mat(n,:) = f_vec_spot;
        fluo_swap_spot_mat(n,:) = f_vec_swap;
    end
    % save to structure
    results_struct(i).feature = f_string;
    results_struct(i).protein_spot_mean = nanmean(protein_spot_mat);
    results_struct(i).protein_spot_mean = nanmean(protein_spot_mat);
end    
%%    
% & [input_output_snips.fluo_change_size] > 40;

for i = 1:numel(feature_cell)
    % record
    f_name = feature_cell{i};
    eval(['protein_' f_name '_mean = nanmean(protein_' f_name '_mat);'])
    eval(['protein_' f_name '_ste = nanstd(protein_' f_name '_mat);'])
    
    eval(['fluo_' f_name '_mean = nanmean(fluo_' f_name '_mat);'])
    eval(['fluo_' f_name '_ste = nanstd(fluo_' f_name '_mat);'])
end

dep_var_vec = {'p','p','f','f'};
%%
for i = 4%1:numel(feature_cell)
    % record
    f_name = feature_cell{i};
    eval(['f_vec = fluo_' f_name '_mean;'])
    eval(['p_vec = protein_' f_name '_mean;'])
    fig = figure;
    hold on
    if strcmpi(dep_var_vec{i},'f')
        eval(['high = f_vec + fluo_' f_name '_ste;'])
        eval(['low = f_vec - fluo_' f_name '_ste;'])
        yyaxis left
        fill([lag_axis fliplr(lag_axis)],[high fliplr(low)],bl,'FaceAlpha',.2,'EdgeAlpha',0)
        p1 = plot(lag_axis,f_vec,'-','Color',bl,'LineWidth',1.3);
        yyaxis right
        p2 = plot(lag_axis,p_vec,'Color',rd,'LineWidth',1.3);
    else
        eval(['high = p_vec + protein_' f_name '_ste;'])
        eval(['low = p_vec - protein_' f_name '_ste;'])
        yyaxis right
        fill([lag_axis fliplr(lag_axis)],[high fliplr(low)],rd,'FaceAlpha',.2,'EdgeAlpha',0)
        p2 = plot(lag_axis,p_vec,'-','Color',rd,'LineWidth',1.3);
        yyaxis left
        p1 = plot(lag_axis,f_vec,'Color',bl,'LineWidth',1.3);
    end        
    legend([p1 p2],gene_name,protein_name)
    grid on
    xlabel('offset (minutes)')
end