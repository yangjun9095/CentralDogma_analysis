% projectName = 'CentralDogma'
% Last updated : 
% Description : For a given Prefix (single embryo),
% generate plots of LlamaTag data and compare with prediction generated by
% estimate_cytomRNA_protein

% Inputs : 1) single embryo (Prefix), 2) DataType (LoadMS2Sets) or
% AveragedDatasets, 3) individual embryos (optional...)

% Outputs : 

function plt_compare_LlamaTagData_numericalEstimate(Prefix)
%% Load datasets
FilePath = 'S:\YangJoon\Dropbox\CentralDogmaResults';
Prefix = '2018-08-20-hbP2P-MS2V5-2xMCP-mCherry-vasa-eGFP1';
%Prefix = '2018-08-08-hbP2P-MS2V5-NB-2xMCP-mCherry-vasa-eGFP1';
%Prefix = '2018-08-09-hbP2P-MS2V5-2xMCP-mCherry-vasa-eGFP1-3';
cn = load([FilePath,filesep,...
            Prefix,filesep,'CompiledNuclei.mat']);

%% Define some options/parameters
startNC = 13;
%% Extract useful fields
% mean nuclear fluo, sd, number of nuclei, time
% time info
% Time = cn.ElapsedTime;
tLength = length(cn.MeanVectorAP(:,1));
% nc12 = cn.nc12;
% nc13 = cn.nc13;
% nc14 = cn.nc14;

% mean, sd, number of nuclei
nucfluo_mean = cn.MeanVectorAP;
nucfluo_sd = cn.SDVectorAP;
num_nuclei = cn.NParticlesAP;

nucfluo_sem = nucfluo_sd./num_nuclei;

%% generate plots for check

%% subtract the Background fluo (free eGFP)
% Note that there are multiple ways to do so and it's summarized in my
% OpposingGradients notes. Here, I'll just pick the simplest way, which is
% picking the most posterior bins (50%-60%) that doesn't have Nans for all
% time points. Perhaps we can average 2-3 APbins from the most posterior
% bin.

% the first time point, find the APbins with NaNs. Then, pick the posterior
% one that is larger than 9th bin.
tPoint = 1;
nanAPbins = find(isnan(nucfluo_mean(tPoint,:)));
% among the posterior bins, pick the most anterior.
nanAPIndex = min(find(nanAPbins>9));
nanAPbinIndex = nanAPbins(nanAPIndex) - 1;

nanAPbins = [nanAPbinIndex-1, nanAPbinIndex];

% At each time point, subtract the nuc fluo of those most posterior APbins
for i=1:tLength
    nucfluo_mean_BGsubt(i,:) = nucfluo_mean(i,:) - nanmean(nucfluo_mean(i,nanAPbins));
end

%% generate plots for check (before BG subtraction)
APaxis = 0:0.025:1;
tStep = floor(10/0.6);
hold on
for t=[nc14:tStep:tLength,tLength]
    %errorbar(APaxis, nucfluo_mean_BGsubt(t,:), nucfluo_sem(t,:))
    errorbar(APaxis, nucfluo_mean(t,:), nucfluo_sem(t,:))
end
xlim([0.2 0.6])
ylim([0 max(nucfluo_mean(tLength,:))+100])
title('')
xlabel('')
ylabel('')
legend('0 min','10 min','20 min','30 min','35 min')

%% generate plots for check (after BG subtraction)
hold on
for t=[nc14:tStep:tLength,tLength]
    errorbar(APaxis, nucfluo_mean_BGsubt(t,:), nucfluo_sem(t,:))
end
xlim([0.2 0.6])
ylim([0 max(nucfluo_mean_BGsubt(tLength,:))+100])
xticklabels([0])
title('')
xlabel('')
ylabel('')
legend('0 min','10 min','20 min','30 min','35 min')
StandardFigure(gcf,gca)
%% generate plots from the estimate_cytomRNA_protein
% field_est for matching with the interpolated numerical estimation
nc13_est = nc13-nc13+1;
nc14_est = (nc14-nc13)*100+1;
tLength_est = frameLength - nc13_est;
tStep_est = 10*100; % 10min * 1/(0.01min/step)

hold on
for t=[nc14_est:tStep_est:tLength_est,tLength_est]
    errorbar(APaxis, Protein(t,:), ErrorProtein(t,:))
end

title
end

